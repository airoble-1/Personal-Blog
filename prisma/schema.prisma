// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    // shadowDatabaseUrl =env("SHADOW_DATABASE_URL")
}

model Blog {
    id           Int      @id @default(autoincrement())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    author       User     @relation(fields: [authorId], references: [id])
    authorId     String
    name         String
    description  String
    featureimage String
    posts        Post[]
}

model Post {
    id           Int         @id @default(autoincrement())
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    blog         Blog        @relation(fields: [blogId], references: [id])
    blogId       Int
    author       User        @relation(fields: [authorId], references: [id])
    authorId     String
    title        String
    abstract     String
    content      String
    readyStatus  ReadyStatus @default(Incomplete)
    slug         String
    featureImage String
    comments     Comment[]
    tags         Tag[]
}

enum ReadyStatus {
    ProductionReady
    PreviewReady
    Incomplete
}

model Comment {
    id             Int             @id @default(autoincrement())
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    moderated      DateTime
    deleted        DateTime
    post           Post            @relation(fields: [postId], references: [id])
    postId         Int
    author         User            @relation(fields: [authorId], references: [id])
    authorId       String
    moderator      User?           @relation(fields: [moderatorId], references: [id], name: "moderator")
    moderatorId    String?
    moderationType ModerationType?
    body           String
    moderatedBody  String?
}

enum ModerationType {
    Political
    Language
    Drugs
    Threatening
    Sexual
    HateSpeech
    Shaming
    Fraud
}

model Tag {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post     @relation(fields: [postId], references: [id])
    postId    Int
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    text      String   @db.Text
}

model User {
    id                String    @id @default(cuid())
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    firstName         String
    lastName          String
    profileImage      String?
    email             String    @unique
    passwordHash      String
    role              Role      @default(User)
    // emailVerified     DateTime?
    // accounts          Account[]
    // sessions          Session[]
    comments          Comment[]
    moderatedComments Comment[] @relation(name: "moderator")
    tags              Tag[]
    blogs             Blog[]
    posts             Post[]
}

enum Role {
    User
    Administrator
    Moderator
}

// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? @db.Text
//     access_token      String? @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
